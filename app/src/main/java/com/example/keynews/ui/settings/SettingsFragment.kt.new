package com.example.keynews.ui.settings

// CodeCleaner_Start_9f5f2e75-4623-4235-99b2-1f23b722becb
import android.content.Context
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.CompoundButton
import android.widget.SeekBar
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import com.example.keynews.KeyNewsApp
import com.example.keynews.MainActivity
import com.example.keynews.data.model.NewsSource
import com.example.keynews.data.model.ReadingFeed
import com.example.keynews.data.model.ReadingFeedSourceCrossRef
import com.example.keynews.databinding.FragmentSettingsBinding
import com.example.keynews.ui.settings.tts.TtsEngineManager
import com.example.keynews.ui.settings.tts.TtsSettingsHelper
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

/**
 * Settings Fragment for the application.
 * Manages reading settings, TTS settings, and debug options.
 */
class SettingsFragment : Fragment(), TextToSpeech.OnInitListener {

    private var _binding: FragmentSettingsBinding? = null
    private val binding get() = _binding!!
    
    // TTS Engine manager
    private lateinit var ttsEngineManager: TtsEngineManager

    companion object {
        private const val PREFS_NAME = "keynews_settings"
        private const val KEY_READ_BODY = "read_body"
        private const val KEY_HEADLINES_PER_SESSION = "headlines_per_session"
        private const val KEY_DELAY_BETWEEN_HEADLINES = "delay_between_headlines"
        private const val DEFAULT_HEADLINES_PER_SESSION = 10
        private const val DEFAULT_DELAY_BETWEEN_HEADLINES = 2
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentSettingsBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        // Initialize TTS Engine Manager
        ttsEngineManager = TtsEngineManager(requireContext(), binding, this, viewLifecycleOwner)
        ttsEngineManager.initializeTts()
        
        val prefs = requireContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
        
        // Setup reading settings
        setupReadingSettings(prefs)
        
        // Setup TTS settings controls
        setupTtsControls(prefs)
        
        // Setup "Add language-voice preference" button
        ttsEngineManager.setupAddLanguageVoiceButton()
        
        // Debug section - Add RSS source button
        binding.btnAddRssSource.setOnClickListener {
            addWashingtonTimesRssSource()
        }
    }
    
    /**
     * Setup reading settings (read body, headlines per session, delay between headlines)
     */
    private fun setupReadingSettings(prefs: android.content.SharedPreferences) {
        // Read article body setting
        val readBodyValue = prefs.getBoolean(KEY_READ_BODY, false)
        binding.cbReadBody.isChecked = readBodyValue
        
        binding.cbReadBody.setOnCheckedChangeListener { _: CompoundButton, isChecked: Boolean ->
            prefs.edit().putBoolean(KEY_READ_BODY, isChecked).apply()
        }
        
        // Headlines per session setting
        val headlinesPerSessionValue = prefs.getInt(KEY_HEADLINES_PER_SESSION, DEFAULT_HEADLINES_PER_SESSION)
        binding.etHeadlinesPerSession.setText(headlinesPerSessionValue.toString())
        
        binding.etHeadlinesPerSession.setOnEditorActionListener { v, _, _ ->
            try {
                val value = v.text.toString().toIntOrNull() ?: DEFAULT_HEADLINES_PER_SESSION
                prefs.edit().putInt(KEY_HEADLINES_PER_SESSION, value).apply()
            } catch (e: Exception) {
                // Reset to default if there's a problem
                binding.etHeadlinesPerSession.setText(DEFAULT_HEADLINES_PER_SESSION.toString())
                prefs.edit().putInt(KEY_HEADLINES_PER_SESSION, DEFAULT_HEADLINES_PER_SESSION).apply()
            }
            false
        }
        
        // Delay between headlines setting
        val delayBetweenHeadlinesValue = prefs.getInt(KEY_DELAY_BETWEEN_HEADLINES, DEFAULT_DELAY_BETWEEN_HEADLINES)
        binding.etDelayBetweenHeadlines.setText(delayBetweenHeadlinesValue.toString())
        
        binding.etDelayBetweenHeadlines.setOnEditorActionListener { v, _, _ ->
            try {
                val value = v.text.toString().toIntOrNull() ?: DEFAULT_DELAY_BETWEEN_HEADLINES
                prefs.edit().putInt(KEY_DELAY_BETWEEN_HEADLINES, value).apply()
            } catch (e: Exception) {
                // Reset to default if there's a problem
                binding.etDelayBetweenHeadlines.setText(DEFAULT_DELAY_BETWEEN_HEADLINES.toString())
                prefs.edit().putInt(KEY_DELAY_BETWEEN_HEADLINES, DEFAULT_DELAY_BETWEEN_HEADLINES).apply()
            }
            false
        }
    }
    
    /**
     * Setup TTS settings controls (speed, pitch, test button)
     */
    private fun setupTtsControls(prefs: android.content.SharedPreferences) {
        // Setup speed slider
        binding.seekBarSpeed.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                if (fromUser) {
                    val speechRate = TtsSettingsHelper.progressToSpeechRate(progress)
                    binding.tvSpeedValue.text = String.format("%.1f", speechRate)
                    
                    if (ttsEngineManager.isInitialized()) {
                        ttsEngineManager.getTts()?.setSpeechRate(speechRate)
                        // Save the setting
                        prefs.edit().putFloat(TtsSettingsHelper.KEY_TTS_SPEECH_RATE, speechRate).apply()
                    }
                }
            }
            
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })
        
        // Setup pitch slider
        binding.seekBarPitch.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                if (fromUser) {
                    val pitch = TtsSettingsHelper.progressToPitch(progress)
                    binding.tvPitchValue.text = String.format("%.1f", pitch)
                    
                    if (ttsEngineManager.isInitialized()) {
                        ttsEngineManager.getTts()?.setPitch(pitch)
                        // Save the setting
                        prefs.edit().putFloat(TtsSettingsHelper.KEY_TTS_PITCH, pitch).apply()
                    }
                }
            }
            
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })
        
        // Setup test button
        binding.btnTestTts.setOnClickListener {
            if (ttsEngineManager.isInitialized()) {
                val testText = binding.etTestText.text.toString().takeIf { it.isNotBlank() } 
                    ?: "Testing text to speech"
                ttsEngineManager.getTts()?.speak(testText, TextToSpeech.QUEUE_FLUSH, null, "TEST_UTTERANCE")
            } else {
                Toast.makeText(requireContext(), "TTS not initialized yet", Toast.LENGTH_SHORT).show()
            }
        }
    }

    /**
     * Add Washington Times RSS source in debug section
     */
    private fun addWashingtonTimesRssSource() {
        lifecycleScope.launch {
            try {
                val dataManager = (requireActivity().application as KeyNewsApp).dataManager
                
                // Create source with Washington Times URL
                val source = NewsSource(
                    name = "Washington Times World",
                    rssUrl = "http://p.washingtontimes.com/rss/headlines/news/world/"
                )
                
                // Save the source
                val newSourceId = dataManager.saveNewsSource(source)
                
                // Find default feed or create one if it doesn't exist
                val feedDao = dataManager.database.readingFeedDao()
                var defaultFeed = feedDao.getAllFeeds().firstOrNull { it.isDefault }
                
                if (defaultFeed == null) {
                    defaultFeed = ReadingFeed(name = "Default feed", isDefault = true)
                    val defaultFeedId = feedDao.insertReadingFeed(defaultFeed)
                    defaultFeed = defaultFeed.copy(id = defaultFeedId)
                }
                
                // Link source to default feed
                feedDao.insertFeedSourceCrossRef(
                    ReadingFeedSourceCrossRef(defaultFeed.id, newSourceId)
                )
                
                // Refresh the main drawer if needed
                withContext(Dispatchers.Main) {
                    (activity as? MainActivity)?.loadFeedsIntoDrawer()
                    Toast.makeText(requireContext(), "Washington Times RSS added to Default feed", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(requireContext(), "Error adding RSS source: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }

    /**
     * TTS initialization callback
     */
    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            // Inform the TTS Engine Manager that TTS is initialized
            ttsEngineManager.setInitialized(true, ttsEngineManager.getTts())
        } else {
            Toast.makeText(requireContext(), "Failed to initialize TTS engine", Toast.LENGTH_SHORT).show()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
    
    override fun onDestroy() {
        super.onDestroy()
        ttsEngineManager.shutdown()
    }
}
// CodeCleaner_End_9f5f2e75-4623-4235-99b2-1f23b722becb
